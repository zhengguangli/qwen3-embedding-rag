---
description: 
globs: 
alwaysApply: false
---
# RAG 系统故障排除指南

## 常见问题及解决方案

### 1. Milvus 连接问题

#### 问题：连接失败
```
错误信息：Connection refused 或 Timeout
```

**解决方案：**
- 检查 Milvus 服务是否启动
- 验证连接地址：[config.json](mdc:config.json) 中的 `milvus_uri`
- 确认网络连接和防火墙设置
- 查看 Milvus 服务日志

#### 问题：维度不匹配
```
错误信息：Dimension mismatch 或 ParamError
```

**解决方案：**
- 检查 [rag/config.py](mdc:rag/config.py) 中的 `embedding_dim` 设置
- 确认模型的实际输出维度
- 使用 `--force-recreate` 参数重建集合

### 2. 模型加载问题

#### 问题：Ollama 模型未找到
```
错误信息：Model not found 或 404 Not Found
```

**解决方案：**
- 确认 Ollama 服务正在运行
- 检查模型名称是否正确
- 运行 `ollama list` 查看可用模型
- 使用 `ollama pull` 下载所需模型

#### 问题：API 调用失败
```
错误信息：HTTP 错误或连接超时
```

**解决方案：**
- 检查 Ollama 服务地址和端口
- 确认网络连接正常
- 查看 [rag/utils.py](mdc:rag/utils.py) 中的日志配置
- 尝试直接调用 API 测试连接

### 3. 文档处理问题

#### 问题：文档加载失败
```
错误信息：File not found 或 Permission denied
```

**解决方案：**
- 检查文档路径配置：[config.json](mdc:config.json) 中的 `data_path`
- 确认文件存在且有读取权限
- 验证文件格式是否正确（Markdown）
- 查看 [rag/document.py](mdc:rag/document.py) 中的错误处理

#### 问题：分块处理异常
```
错误信息：Memory error 或 Processing failed
```

**解决方案：**
- 减少批处理大小：[rag/config.py](mdc:rag/config.py) 中的 `batch_size`
- 调整分块大小：`chunk_size` 和 `chunk_overlap`
- 检查可用内存
- 使用更小的文档进行测试

### 4. 性能问题

#### 问题：处理速度慢
**解决方案：**
- 增加并发数：[rag/config.py](mdc:rag/config.py) 中的 `max_workers`
- 启用缓存机制
- 优化批处理大小
- 检查网络延迟

#### 问题：内存使用过高
**解决方案：**
- 减少批处理大小
- 降低并发数
- 定期清理缓存
- 使用流式处理

### 5. 输出问题

#### 问题：答案文件未生成
**解决方案：**
- 检查 `answers/` 目录是否存在
- 确认文件写入权限
- 查看 [rag/main.py](mdc:rag/main.py) 中的文件保存逻辑
- 检查磁盘空间

#### 问题：日志文件过大
**解决方案：**
- 调整日志级别：[rag/utils.py](mdc:rag/utils.py)
- 定期清理日志文件
- 使用日志轮转
- 只保留必要的日志信息

## 调试技巧

### 1. 日志分析
```bash
# 查看最新日志
tail -f logs/rag_system.log

# 查看错误日志
grep ERROR logs/rag_system.log

# 查看特定组件的日志
grep "rag.pipeline" logs/rag_system.log
```

### 2. 配置验证
```python
# 在 [rag/main.py](mdc:rag/main.py) 中添加配置验证
config.print_config()  # 打印所有配置项
```

### 3. 组件测试
```python
# 单独测试各个组件
from rag.config import RAGConfig
from rag.embedding import EmbeddingService

config = RAGConfig()
embedding_service = EmbeddingService(config, client)
result = embedding_service.encode("test text")
print(f"Embedding dimension: {len(result)}")
```

### 4. 性能监控
```python
# 添加性能监控代码
import time

start_time = time.time()
# 执行操作
elapsed_time = time.time() - start_time
logger.info(f"Operation took {elapsed_time:.2f} seconds")
```

## 环境检查清单

### 1. 系统要求
- [ ] Python 3.8+ 已安装
- [ ] 虚拟环境已激活
- [ ] 依赖包已安装：[requirements.txt](mdc:requirements.txt)

### 2. 服务状态
- [ ] Ollama 服务正在运行
- [ ] Milvus 服务正在运行
- [ ] 网络连接正常

### 3. 配置检查
- [ ] [config.json](mdc:config.json) 配置正确
- [ ] API 地址和端口正确
- [ ] 模型名称正确
- [ ] 文档路径存在

### 4. 权限检查
- [ ] 文件读取权限
- [ ] 目录写入权限
- [ ] 网络访问权限

## 获取帮助

### 1. 日志文件位置
- 系统日志：`logs/rag_system.log`
- 答案文件：`answers/` 目录

### 2. 配置文件
- 主配置：[config.json](mdc:config.json)
- 项目配置：[pyproject.toml](mdc:pyproject.toml)

### 3. 文档资源
- 项目说明：[README.md](mdc:README.md)
- 代码注释和文档字符串
- 官方文档和社区资源

# 故障排除和调试指南

## 常见问题解决方案

### 配置相关问题

#### 配置文件加载失败
**症状**: 启动时出现配置错误
**解决方案**:
1. 检查[rag_config.json](mdc:rag_config.json)格式是否正确
2. 验证必需字段是否完整
3. 检查环境变量设置
4. 查看[config.py](mdc:rag/config.py)中的验证逻辑

#### API密钥问题
**症状**: API调用失败，认证错误
**解决方案**:
1. 检查`OPENAI_API_KEY`环境变量
2. 验证API密钥是否有效
3. 检查API基础URL配置
4. 确认账户余额和配额

### 嵌入服务问题

#### 嵌入生成失败
**症状**: 文本编码失败
**解决方案**:
1. 检查[embedding.py](mdc:rag/embedding.py)中的错误处理
2. 验证输入文本格式
3. 检查模型配置是否正确
4. 查看API响应详情

#### 缓存问题
**症状**: 缓存不工作或内存占用过高
**解决方案**:
1. 检查缓存大小配置
2. 验证缓存键生成逻辑
3. 监控缓存命中率
4. 必要时清空缓存

### Milvus服务问题

#### 连接失败
**症状**: 无法连接到Milvus
**解决方案**:
1. 检查Milvus服务状态
2. 验证连接URI配置
3. 检查网络连接
4. 查看[milvus_service.py](mdc:rag/milvus_service.py)中的连接逻辑

#### 向量搜索失败
**症状**: 搜索返回空结果或错误
**解决方案**:
1. 检查集合是否存在
2. 验证向量维度是否匹配
3. 检查索引是否正确构建
4. 查看搜索参数配置

### 性能问题

#### 响应时间过长
**症状**: 查询处理时间过长
**解决方案**:
1. 检查缓存配置和命中率
2. 优化批处理大小
3. 监控API调用频率
4. 检查网络延迟

#### 内存使用过高
**症状**: 内存占用持续增长
**解决方案**:
1. 检查缓存大小设置
2. 监控LRU缓存使用情况
3. 定期清理缓存
4. 优化批处理策略

## 调试工具和方法

### 日志分析
- 查看结构化日志输出
- 使用不同日志级别进行调试
- 分析性能指标日志
- 检查错误追踪信息

### 健康检查
使用各服务的`health_check()`方法：
```python
# 检查嵌入服务
embedding_service.health_check()

# 检查Milvus服务
milvus_service.health_check()

# 检查整体系统
pipeline.get_statistics()
```

### 性能监控
- 监控响应时间统计
- 检查缓存命中率
- 分析API调用频率
- 跟踪内存使用情况

### 配置验证
使用配置验证方法：
```python
# 验证嵌入模型配置
embedding_service.validate_model_config()

# 验证整体配置
config.validate()
```

## 错误处理最佳实践

### 异常捕获
使用统一的异常处理系统[exceptions.py](mdc:rag/exceptions.py)：
```python
try:
    result = service.operation()
except RAGException as e:
    logger.error(f"操作失败: {e}")
    # 处理特定异常类型
```

### 重试机制
- 使用tenacity库进行智能重试
- 配置指数退避策略
- 设置最大重试次数
- 记录重试统计信息

### 优雅降级
- 提供默认响应
- 使用缓存数据
- 简化处理流程
- 返回部分结果

## 监控和告警

### 关键指标
- API响应时间
- 错误率
- 缓存命中率
- 资源使用情况

### 告警设置
- 响应时间阈值
- 错误率阈值
- 资源使用阈值
- 服务健康状态

### 日志聚合
- 结构化日志格式
- 日志级别管理
- 错误追踪
- 性能分析
