---
description:
globs:
alwaysApply: false
---
# Qwen3嵌入RAG项目结构指南

## 核心架构

这是一个基于Qwen3嵌入模型和Milvus向量数据库的现代化RAG（检索增强生成）系统。

### 主要入口点
- [main.py](mdc:main.py) - 应用程序主入口，提供CLI接口
- [rag/main.py](mdc:rag/main.py) - RAG核心逻辑入口

### 核心模块
- [rag/config.py](mdc:rag/config.py) - 配置管理，使用Pydantic进行验证
- [rag/base.py](mdc:rag/base.py) - 统一服务基类，提供缓存、监控、错误处理
- [rag/exceptions.py](mdc:rag/exceptions.py) - 统一异常处理系统
- [rag/embedding.py](mdc:rag/embedding.py) - 嵌入服务，支持批量处理和缓存
- [rag/milvus_service.py](mdc:rag/milvus_service.py) - Milvus向量数据库服务
- [rag/pipeline.py](mdc:rag/pipeline.py) - RAG管道，协调各组件工作
- [rag/llm.py](mdc:rag/llm.py) - 大语言模型服务
- [rag/reranker.py](mdc:rag/reranker.py) - 重排序服务
- [rag/document.py](mdc:rag/document.py) - 文档处理
- [rag/utils.py](mdc:rag/utils.py) - 工具函数

### 配置管理
- [rag_config.json](mdc:rag_config.json) - 默认配置文件
- [rag_config.remote_milvus.json](mdc:rag_config.remote_milvus.json) - 远程Milvus配置
- [config.template.yaml](mdc:config.template.yaml) - 配置模板

### 项目元数据
- [pyproject.toml](mdc:pyproject.toml) - 项目依赖和构建配置
- [Makefile](mdc:Makefile) - 构建和开发任务
- [README.md](mdc:README.md) - 项目文档

### 内存库
- [memory-bank/](mdc:memory-bank/) - 项目知识库，包含项目上下文和进度

## 设计模式

1. **服务基类模式**: 所有服务继承自[CacheableService](mdc:rag/base.py)
2. **配置驱动**: 使用Pydantic进行类型安全的配置管理
3. **异常处理**: 统一的异常层次结构和处理机制
4. **缓存策略**: LRU缓存和自定义缓存系统
5. **异步架构**: 支持并发处理和批量操作
