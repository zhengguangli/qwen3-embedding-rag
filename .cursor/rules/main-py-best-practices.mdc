---
description: 
globs: 
alwaysApply: false
---
# main.py 最佳实践与优化规则

## 结构与职责
- 主入口为 [main.py](mdc:main.py)
- 配置集中在 `RAGConfig` 类，所有参数、模型、路径、设备等均在此统一管理
- 主要业务逻辑封装在 `RAGPipeline` 类，负责数据加载、检索、重排序、答案生成
- 入口函数 `main()` 支持命令行参数，便于灵活调用

## 类型注解与文档
- 所有公开方法、函数、类均应添加类型注解
- 关键方法需有详细 docstring，描述输入输出与功能

## 日志与异常
- 全局统一使用 `logger`，禁止使用 print
- 关键步骤、异常、耗时均需日志记录，便于排查与性能分析
- 外部 API、模型、数据库等调用均需 try-except 包裹，异常信息应详细

## 性能与批处理
- 文档分块、向量编码等大批量操作需支持批处理，默认用 tqdm 展示进度
- 关键步骤（如模型加载、批量编码）需统计耗时
- 支持 GPU/CPU 自动切换，配置项 DEVICE 自动判断

## 缓存与可维护性
- 频繁调用的 encode、格式化等方法用 lru_cache 缓存，缓存大小可配置
- 结构清晰，方法职责单一，便于扩展和单元测试

## 依赖与环境
- 启动时自动检查依赖包和 Python 版本，缺失或不兼容时给出友好提示
- 依赖版本建议在 pyproject.toml 明确约束

## 配置与调试
- 启动时输出关键配置参数，便于调试和环境核查
- 支持 --force-recreate 参数强制重建 Milvus 集合，便于数据重导入

## 代码规范
- 遵循 PEP8 代码风格，变量、类、方法命名规范
- 重要常量、参数、路径等均集中管理，避免硬编码

## 参考文件
- [main.py](mdc:main.py)
- [pyproject.toml](mdc:pyproject.toml)
